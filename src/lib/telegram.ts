interface OrderData {
  name: string;
  phone: string;
  carType: string;
  loaders: string;
  date: string;
  needHydroboard: string;
  needRokla: string;
}

export const sendToTelegram = async (
  orderData: OrderData,
): Promise<boolean> => {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `üöö *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É*

üë§ *–ò–º—è:* ${orderData.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${orderData.phone}
üöõ *–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:* ${getCarTypeName(orderData.carType)}
üë∑ *–ì—Ä—É–∑—á–∏–∫–∏:* ${getLoadersText(orderData.loaders)}
üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* ${formatDate(orderData.date)}
üèóÔ∏è *–ì–∏–¥—Ä–æ–±–æ—Ä—Ç:* ${orderData.needHydroboard === "yes" ? "–¢—Ä–µ–±—É–µ—Ç—Å—è" : "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"}
üì¶ *–†–æ–∫–ª–∞:* ${orderData.needRokla === "yes" ? "–¢—Ä–µ–±—É–µ—Ç—Å—è" : "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"}


_–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Å–∞–π—Ç–∞_`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Bot API
    const botToken = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
    const chatId = import.meta.env.VITE_TELEGRAM_CHAT_ID;

    if (!botToken || !chatId) {
      console.warn("Telegram credentials not configured");
      return false;
    }

    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown",
        }),
      },
    );

    return response.ok;
  } catch (error) {
    console.error("Error sending to Telegram:", error);
    return false;
  }
};

const getCarTypeName = (value: string): string => {
  const types: Record<string, string> = {
    "0.5": "–ö–∞–±–ª—É–∫ 0.5—Ç",
    "1.5": "–ì–∞–∑–µ–ª—å 1.5—Ç",
    "3": "–ì—Ä—É–∑–æ–≤–∏–∫ 3—Ç",
    "5": "–ì—Ä—É–∑–æ–≤–∏–∫ 5—Ç",
    "10": "–ì—Ä—É–∑–æ–≤–∏–∫ 10—Ç",
  };
  return types[value] || value;
};

const getLoadersText = (value: string): string => {
  if (value === "0") return "–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è";
  if (value === "1") return "1 –≥—Ä—É–∑—á–∏–∫";
  return `${value} –≥—Ä—É–∑—á–∏–∫–∞`;
};

const formatDate = (dateString: string): string => {
  if (!dateString) return "–ù–µ —É–∫–∞–∑–∞–Ω–∞";

  const date = new Date(dateString);
  return date.toLocaleString("ru-RU", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
};
