interface OrderData {
  name: string;
  phone: string;
  carType: string;
  loaders: string;
  date: string;
  needHydroboard: string;
  needRokla: string;
  cargoType: string;
  cargoQuantity: string;
  cargoWeight: string;
  loadingAddress: string;
  unloadingAddress: string;
  loadingFloor: string;
  unloadingFloor: string;
}

export const sendToTelegram = async (
  orderData: OrderData,
): Promise<boolean> => {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `üöö *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É*

*üë§ –ö–õ–ò–ï–ù–¢:*
‚Ä¢ –ò–º—è: ${orderData.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formatDate(orderData.date)}

*üì¶ –ì–†–£–ó:*
‚Ä¢ –¢–∏–ø –≥—Ä—É–∑–∞: ${getCargoTypeName(orderData.cargoType)}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${orderData.cargoQuantity || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å: ${orderData.cargoWeight ? orderData.cargoWeight + " –∫–≥" : "–ù–µ —É–∫–∞–∑–∞–Ω"}

*üöõ –¢–†–ê–ù–°–ü–û–†–¢:*
‚Ä¢ –¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${getCarTypeName(orderData.carType)}
‚Ä¢ –ì—Ä—É–∑—á–∏–∫–∏: ${getLoadersText(orderData.loaders)}
‚Ä¢ –ì–∏–¥—Ä–æ–±–æ—Ä—Ç: ${orderData.needHydroboard === "yes" ? "–¢—Ä–µ–±—É–µ—Ç—Å—è" : "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"}
‚Ä¢ –†–æ–∫–ª–∞: ${orderData.needRokla === "yes" ? "–¢—Ä–µ–±—É–µ—Ç—Å—è" : "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"}

*üìç –ê–î–†–ï–°–ê:*
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: ${orderData.loadingAddress || "–ù–µ —É–∫–∞–∑–∞–Ω"}
‚Ä¢ –ü–æ—ç—Ç–∞–∂–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${getFloorText(orderData.loadingFloor)}
‚Ä¢ –í—ã–≥—Ä—É–∑–∫–∞: ${orderData.unloadingAddress || "–ù–µ —É–∫–∞–∑–∞–Ω"}
‚Ä¢ –ü–æ—ç—Ç–∞–∂–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏: ${getFloorText(orderData.unloadingFloor)}

_–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Å–∞–π—Ç–∞_`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Bot API
    const botToken = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
    const chatId = import.meta.env.VITE_TELEGRAM_CHAT_ID;

    if (!botToken || !chatId) {
      console.warn("Telegram credentials not configured");
      return false;
    }

    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown",
        }),
      },
    );

    return response.ok;
  } catch (error) {
    console.error("Error sending to Telegram:", error);
    return false;
  }
};

const getCarTypeName = (value: string): string => {
  const types: Record<string, string> = {
    "0.5": "–ö–∞–±–ª—É–∫ 0.5—Ç",
    "1.5": "–ì–∞–∑–µ–ª—å 1.5—Ç",
    "3": "–ì—Ä—É–∑–æ–≤–∏–∫ 3—Ç",
    "5": "–ì—Ä—É–∑–æ–≤–∏–∫ 5—Ç",
    "10": "–ì—Ä—É–∑–æ–≤–∏–∫ 10—Ç",
    "20": "–§—É—Ä–∞ 20—Ç",
  };
  return types[value] || value || "–ù–µ —É–∫–∞–∑–∞–Ω";
};

const getCargoTypeName = (value: string): string => {
  const types: Record<string, string> = {
    "furniture": "–ú–µ–±–µ–ª—å",
    "appliances": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
    "construction": "–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "food": "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
    "documents": "–î–æ–∫—É–º–µ–Ω—Ç—ã",
    "equipment": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
    "personal": "–õ–∏—á–Ω—ã–µ –≤–µ—â–∏",
    "other": "–î—Ä—É–≥–æ–µ",
  };
  return types[value] || value || "–ù–µ —É–∫–∞–∑–∞–Ω";
};

const getFloorText = (value: string): string => {
  const floors: Record<string, string> = {
    "ground": "1 —ç—Ç–∞–∂ / –ó–µ–º–ª—è",
    "elevator": "–í—ã—Å–æ–∫–∏–π —ç—Ç–∞–∂ + –ª–∏—Ñ—Ç",
    "stairs-2": "2 —ç—Ç–∞–∂ –±–µ–∑ –ª–∏—Ñ—Ç–∞",
    "stairs-3": "3 —ç—Ç–∞–∂ –±–µ–∑ –ª–∏—Ñ—Ç–∞",
    "stairs-4": "4 —ç—Ç–∞–∂ –±–µ–∑ –ª–∏—Ñ—Ç–∞",
    "stairs-5plus": "5+ —ç—Ç–∞–∂ –±–µ–∑ –ª–∏—Ñ—Ç–∞",
  };
  return floors[value] || value || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
};

const getLoadersText = (value: string): string => {
  if (value === "0") return "–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è";
  if (value === "1") return "1 –≥—Ä—É–∑—á–∏–∫";
  return `${value} –≥—Ä—É–∑—á–∏–∫–∞`;
};

const formatDate = (dateString: string): string => {
  if (!dateString) return "–ù–µ —É–∫–∞–∑–∞–Ω–∞";

  const date = new Date(dateString);
  return date.toLocaleString("ru-RU", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
};